#!/bin/bash

# Setup Claude Code para ERPs Agroneg√≥cio
# Vers√£o: 1.0
# Data: 2025-08-31

set -e

echo "üåæ Configurando Claude Code para ERPs Agroneg√≥cio..."
echo "=================================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para logging
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

# Verificar se Claude Code est√° instalado
check_claude_code() {
    log "Verificando instala√ß√£o Claude Code..."
    if ! command -v claude &> /dev/null; then
        error "Claude Code n√£o encontrado. Instale primeiro: https://claude.ai/code"
    fi
    log "Claude Code encontrado: $(claude --version)"
}

# Criar estrutura de diret√≥rios
create_directory_structure() {
    log "Criando estrutura de diret√≥rios..."
    
    mkdir -p ~/.claude/agro-erp/{
        settings,
        agents,
        hooks,
        mcps,
        schemas,
        scripts,
        templates,
        docs
    }
    
    log "Estrutura criada em ~/.claude/agro-erp/"
}

# Configurar settings b√°sicos
setup_basic_settings() {
    log "Configurando settings b√°sicos..."
    
    cat > ~/.claude/agro-erp/settings/base.json << 'EOF'
{
  "permissions": {
    "defaultMode": "normal",
    "allowedTools": ["*"],
    "restrictedPaths": []
  },
  "hooks": {
    "PreToolUse": [
      {
        "matcher": "Write.*fiscal.*",
        "hooks": [
          {
            "type": "command",
            "command": "python ~/.claude/agro-erp/scripts/validate-fiscal-data.py",
            "timeout": 30
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Database.*",
        "hooks": [
          {
            "type": "command",
            "command": "python ~/.claude/agro-erp/scripts/audit-database-changes.py",
            "timeout": 60
          }
        ]
      }
    ],
    "UserPromptSubmit": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "python ~/.claude/agro-erp/scripts/load-agro-context.py",
            "timeout": 15
          }
        ]
      }
    ],
    "SessionStart": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "bash ~/.claude/agro-erp/scripts/setup-agro-environment.sh",
            "timeout": 45
          }
        ]
      }
    ]
  },
  "mcps": {
    "sefaz-mt": {
      "enabled": true,
      "config": {
        "environment": "homologacao",
        "timeout": 30000
      }
    },
    "banking-br": {
      "enabled": true,
      "config": {
        "protocols": ["pix", "cnab240", "cnab400"],
        "timeout": 15000
      }
    },
    "cooperativa-local": {
      "enabled": false,
      "config": {
        "edi_format": "edifact",
        "timeout": 20000
      }
    }
  }
}
EOF
    
    log "Settings b√°sicos configurados"
}

# Criar subagentes especializados
create_specialized_agents() {
    log "Criando subagentes especializados para agroneg√≥cio..."
    
    # Agente Compliance Fiscal
    cat > ~/.claude/agro-erp/agents/agro-fiscal-compliance.yaml << 'EOF'
---
name: agro-fiscal-compliance
description: Especialista em compliance fiscal para agroneg√≥cio brasileiro
tools: [sefaz-mt, banking-br, database]
---

Voc√™ √© um especialista em compliance fiscal para o agroneg√≥cio brasileiro, com conhecimento profundo de:

## Regulamenta√ß√µes Fiscais
- SPED Fiscal, Cont√°bil, ECD, ECF
- NFe, NFCe, CTe, MDFe, NFS-e
- FUNRURAL, INCRA, ITR
- Regulamenta√ß√µes espec√≠ficas MT: NFP-e, SEFAZ-MT
- LGPD aplicada ao agroneg√≥cio

## Processos Agroneg√≥cio
- Ciclos produtivos (soja, milho, algod√£o)
- Gest√£o por talh√µes e safras
- Contratos de commodities
- Beneficiamento e armazenagem
- Log√≠stica e transporte rural

## Integra√ß√µes Cr√≠ticas
- SEFAZ-MT: Consultas, valida√ß√µes, emiss√µes
- Bancos: PIX, CNAB, concilia√ß√£o
- Cooperativas: EDI, recebimento, liquida√ß√£o
- INDEA-MT: GTA, certificados fitossanit√°rios

## Workflow de Valida√ß√£o
1. Analisar dados fiscais de entrada
2. Validar conformidade regulamenta√ß√µes
3. Verificar integridade integra√ß√µes
4. Gerar alertas n√£o-conformidades
5. Sugerir corre√ß√µes autom√°ticas
6. Documentar valida√ß√µes realizadas

Sempre priorize conformidade 100% e sugira melhorias proativas.
EOF

    # Agente Integra√ß√£o APIs
    cat > ~/.claude/agro-erp/agents/agro-api-integrator.yaml << 'EOF'
---
name: agro-api-integrator
description: Especialista em integra√ß√µes APIs para agroneg√≥cio
tools: [http-client, database, file-system]
---

Voc√™ √© um especialista em integra√ß√µes de APIs para o agroneg√≥cio, focado em:

## APIs Governamentais
- SEFAZ (todos os estados, especialmente MT)
- Receita Federal (CNPJ, CPF, SPED)
- INCRA (SNIR, SIGEF)
- INDEA (GTA, certificados)
- MAPA (AGROFIT, sementes)

## APIs Financeiras
- Bancos: BB, Bradesco, Sicredi, Sicoob
- PIX: SPI, DICT, cobran√ßa
- CNAB: 240, 400, retornos
- Open Finance: consentimentos, dados

## APIs Cooperativas
- Sistemas pr√≥prios cooperativas
- EDI EDIFACT para commodities
- Classifica√ß√£o e recebimento
- Liquida√ß√£o financeira

## APIs Terceiros
- Meteorologia: INMET, Weather APIs
- Sat√©lite: Planet, Sentinel, MODIS
- Cota√ß√µes: B3, CME, CBOT
- Log√≠stica: transportadoras, rastreamento

## Padr√µes de Integra√ß√£o
- REST APIs com autentica√ß√£o OAuth2/JWT
- SOAP para sistemas legados
- WebSockets para real-time
- Message queues para processamento ass√≠ncrono
- Retry policies e circuit breakers
- Logging e monitoring completo

Sempre implemente integra√ß√µes robustas, com tratamento de erros e fallbacks.
EOF

    # Agente Moderniza√ß√£o Legacy
    cat > ~/.claude/agro-erp/agents/agro-legacy-modernizer.yaml << 'EOF'
---
name: agro-legacy-modernizer
description: Especialista em moderniza√ß√£o de sistemas ERP legados do agroneg√≥cio
tools: [code-analyzer, database, refactoring-tools]
---

Voc√™ √© um especialista em moderniza√ß√£o de sistemas ERP legados do agroneg√≥cio, com foco em:

## An√°lise de Sistemas Legados
- Mapeamento arquitetura existente
- Identifica√ß√£o depend√™ncias cr√≠ticas
- An√°lise qualidade c√≥digo
- Documenta√ß√£o processos de neg√≥cio
- Avalia√ß√£o riscos migra√ß√£o

## Estrat√©gias de Moderniza√ß√£o
- Strangler Fig Pattern para migra√ß√£o gradual
- API Gateway para integra√ß√£o h√≠brida
- Microservi√ßos para m√≥dulos espec√≠ficos
- Event-driven architecture
- Database modernization incremental

## Tecnologias Alvo
- Cloud-native: Kubernetes, Docker
- APIs modernas: GraphQL, REST
- Databases: PostgreSQL, MongoDB
- Message brokers: RabbitMQ, Kafka
- Monitoring: Prometheus, Grafana

## Processos Agro Espec√≠ficos
- Migra√ß√£o dados safras hist√≥ricas
- Preserva√ß√£o compliance fiscal
- Integra√ß√£o sistemas campo (offline)
- Manuten√ß√£o integra√ß√µes cooperativas
- Continuidade operacional cr√≠tica

## Metodologia
1. Assessment completo sistema atual
2. Planejamento migra√ß√£o por m√≥dulos
3. Implementa√ß√£o incremental com rollback
4. Testes paralelos produ√ß√£o/novo
5. Cutover controlado por funcionalidade
6. Monitoring p√≥s-migra√ß√£o

Sempre priorize continuidade operacional e zero perda de dados.
EOF

    log "Subagentes especializados criados"
}

# Criar scripts de valida√ß√£o
create_validation_scripts() {
    log "Criando scripts de valida√ß√£o..."
    
    # Script valida√ß√£o fiscal
    cat > ~/.claude/agro-erp/scripts/validate-fiscal-data.py << 'EOF'
#!/usr/bin/env python3
"""
Script de valida√ß√£o de dados fiscais para agroneg√≥cio
Executa valida√ß√µes autom√°ticas antes de opera√ß√µes fiscais cr√≠ticas
"""

import sys
import json
import re
from datetime import datetime
from typing import Dict, List, Any

def validate_cnpj(cnpj: str) -> bool:
    """Valida CNPJ usando algoritmo oficial"""
    cnpj = re.sub(r'[^0-9]', '', cnpj)
    if len(cnpj) != 14:
        return False
    
    # Algoritmo valida√ß√£o CNPJ
    weights1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2]
    weights2 = [6, 7, 8, 9, 2, 3, 4, 5, 6, 7, 8, 9]
    
    def calc_digit(cnpj_digits, weights):
        sum_result = sum(int(digit) * weight for digit, weight in zip(cnpj_digits, weights))
        remainder = sum_result % 11
        return 0 if remainder < 2 else 11 - remainder
    
    first_digit = calc_digit(cnpj[:12], weights1)
    second_digit = calc_digit(cnpj[:13], weights2)
    
    return cnpj[12:14] == f"{first_digit}{second_digit}"

def validate_nfe_data(data: Dict[str, Any]) -> List[str]:
    """Valida dados para emiss√£o NFe"""
    errors = []
    
    # Valida√ß√µes obrigat√≥rias NFe
    required_fields = [
        'cnpj_emitente', 'cnpj_destinatario', 'valor_total',
        'cfop', 'natureza_operacao', 'items'
    ]
    
    for field in required_fields:
        if field not in data or not data[field]:
            errors.append(f"Campo obrigat√≥rio ausente: {field}")
    
    # Validar CNPJs
    if 'cnpj_emitente' in data and not validate_cnpj(data['cnpj_emitente']):
        errors.append("CNPJ emitente inv√°lido")
    
    if 'cnpj_destinatario' in data and not validate_cnpj(data['cnpj_destinatario']):
        errors.append("CNPJ destinat√°rio inv√°lido")
    
    # Validar CFOP agroneg√≥cio
    cfop_agro_valid = ['5101', '5102', '5103', '5104', '5105', '5106', '5109', '5110']
    if 'cfop' in data and data['cfop'] not in cfop_agro_valid:
        errors.append(f"CFOP {data['cfop']} n√£o √© v√°lido para agroneg√≥cio")
    
    # Validar itens
    if 'items' in data:
        for i, item in enumerate(data['items']):
            if 'ncm' not in item:
                errors.append(f"Item {i+1}: NCM obrigat√≥rio")
            if 'valor_unitario' not in item or item['valor_unitario'] <= 0:
                errors.append(f"Item {i+1}: Valor unit√°rio inv√°lido")
    
    return errors

def validate_funrural_data(data: Dict[str, Any]) -> List[str]:
    """Valida dados para c√°lculo FUNRURAL"""
    errors = []
    
    # Valida√ß√µes FUNRURAL
    if 'tipo_produtor' not in data:
        errors.append("Tipo de produtor n√£o informado")
    elif data['tipo_produtor'] not in ['PF', 'PJ']:
        errors.append("Tipo de produtor deve ser PF ou PJ")
    
    if 'valor_comercializacao' not in data or data['valor_comercializacao'] <= 0:
        errors.append("Valor de comercializa√ß√£o inv√°lido")
    
    # Verificar produtos com isen√ß√£o
    produtos_isencao = ['sementes_certificadas', 'mudas_certificadas']
    if 'produto' in data and data['produto'] in produtos_isencao:
        if 'certificado_mapa' not in data:
            errors.append("Produto com isen√ß√£o requer certificado MAPA")
    
    return errors

def main():
    """Fun√ß√£o principal de valida√ß√£o"""
    try:
        # Ler dados do stdin (enviados pelo Claude Code)
        input_data = json.loads(sys.stdin.read())
        
        validation_errors = []
        
        # Determinar tipo de valida√ß√£o baseado no contexto
        if 'nfe' in input_data:
            validation_errors.extend(validate_nfe_data(input_data['nfe']))
        
        if 'funrural' in input_data:
            validation_errors.extend(validate_funrural_data(input_data['funrural']))
        
        # Resultado da valida√ß√£o
        result = {
            'timestamp': datetime.now().isoformat(),
            'valid': len(validation_errors) == 0,
            'errors': validation_errors,
            'warnings': []
        }
        
        # Output para Claude Code
        print(json.dumps(result, indent=2, ensure_ascii=False))
        
        # Exit code baseado na valida√ß√£o
        sys.exit(0 if result['valid'] else 1)
        
    except Exception as e:
        error_result = {
            'timestamp': datetime.now().isoformat(),
            'valid': False,
            'errors': [f"Erro interno valida√ß√£o: {str(e)}"],
            'warnings': []
        }
        print(json.dumps(error_result, indent=2, ensure_ascii=False))
        sys.exit(1)

if __name__ == "__main__":
    main()
EOF

    chmod +x ~/.claude/agro-erp/scripts/validate-fiscal-data.py
    
    # Script auditoria database
    cat > ~/.claude/agro-erp/scripts/audit-database-changes.py << 'EOF'
#!/usr/bin/env python3
"""
Script de auditoria para mudan√ßas no database
Registra todas as opera√ß√µes cr√≠ticas para compliance
"""

import sys
import json
import hashlib
from datetime import datetime
from typing import Dict, Any

def hash_data(data: Any) -> str:
    """Gera hash dos dados para auditoria"""
    data_str = json.dumps(data, sort_keys=True, ensure_ascii=False)
    return hashlib.sha256(data_str.encode()).hexdigest()

def audit_database_operation(operation_data: Dict[str, Any]) -> Dict[str, Any]:
    """Audita opera√ß√£o no database"""
    
    audit_record = {
        'timestamp': datetime.now().isoformat(),
        'operation_type': operation_data.get('type', 'unknown'),
        'table': operation_data.get('table', 'unknown'),
        'user': operation_data.get('user', 'system'),
        'data_hash': hash_data(operation_data.get('data', {})),
        'compliance_flags': []
    }
    
    # Verificar opera√ß√µes cr√≠ticas para compliance
    critical_tables = [
        'nfe_emitidas', 'nfe_recebidas', 'sped_registros',
        'funrural_calculos', 'talhoes', 'safras', 'contratos'
    ]
    
    if audit_record['table'] in critical_tables:
        audit_record['compliance_flags'].append('CRITICAL_DATA')
    
    # Verificar opera√ß√µes fiscais
    if 'fiscal' in audit_record['table'] or 'nfe' in audit_record['table']:
        audit_record['compliance_flags'].append('FISCAL_OPERATION')
    
    # Verificar opera√ß√µes financeiras
    if any(keyword in audit_record['table'] for keyword in ['pagamento', 'recebimento', 'conciliacao']):
        audit_record['compliance_flags'].append('FINANCIAL_OPERATION')
    
    return audit_record

def main():
    """Fun√ß√£o principal de auditoria"""
    try:
        # Ler dados da opera√ß√£o
        input_data = json.loads(sys.stdin.read())
        
        # Gerar registro de auditoria
        audit_record = audit_database_operation(input_data)
        
        # Salvar em log de auditoria (em produ√ß√£o, usar database dedicado)
        audit_log_path = "~/.claude/agro-erp/logs/database_audit.jsonl"
        with open(audit_log_path, "a") as f:
            f.write(json.dumps(audit_record, ensure_ascii=False) + "\n")
        
        # Output para Claude Code
        result = {
            'audit_id': audit_record['timestamp'],
            'status': 'recorded',
            'compliance_flags': audit_record['compliance_flags']
        }
        
        print(json.dumps(result, indent=2, ensure_ascii=False))
        sys.exit(0)
        
    except Exception as e:
        error_result = {
            'status': 'error',
            'message': f"Erro auditoria: {str(e)}"
        }
        print(json.dumps(error_result, indent=2, ensure_ascii=False))
        sys.exit(1)

if __name__ == "__main__":
    main()
EOF

    chmod +x ~/.claude/agro-erp/scripts/audit-database-changes.py
    
    log "Scripts de valida√ß√£o criados"
}

# Criar schemas MCP
create_mcp_schemas() {
    log "Criando schemas MCP..."
    
    # Schema SEFAZ-MT MCP
    cat > ~/.claude/agro-erp/schemas/sefaz-mt-mcp.json << 'EOF'
{
  "name": "sefaz-mt",
  "version": "1.0.0",
  "description": "MCP Server para integra√ß√£o com SEFAZ-MT",
  "tools": [
    {
      "name": "consultar_nfe",
      "description": "Consulta situa√ß√£o de NFe no SEFAZ-MT",
      "inputSchema": {
        "type": "object",
        "properties": {
          "chave_nfe": {
            "type": "string",
            "pattern": "^[0-9]{44}$",
            "description": "Chave de acesso da NFe (44 d√≠gitos)"
          },
          "ambiente": {
            "type": "string",
            "enum": ["producao", "homologacao"],
            "default": "homologacao"
          }
        },
        "required": ["chave_nfe"]
      }
    },
    {
      "name": "emitir_nfe",
      "description": "Emite NFe atrav√©s do SEFAZ-MT",
      "inputSchema": {
        "type": "object",
        "properties": {
          "dados_nfe": {
            "type": "object",
            "properties": {
              "emitente": {"$ref": "#/definitions/empresa"},
              "destinatario": {"$ref": "#/definitions/empresa"},
              "itens": {
                "type": "array",
                "items": {"$ref": "#/definitions/item_nfe"}
              },
              "totais": {"$ref": "#/definitions/totais_nfe"}
            },
            "required": ["emitente", "destinatario", "itens", "totais"]
          }
        },
        "required": ["dados_nfe"]
      }
    },
    {
      "name": "consultar_cadastro",
      "description": "Consulta cadastro de contribuinte no SEFAZ-MT",
      "inputSchema": {
        "type": "object",
        "properties": {
          "cnpj": {
            "type": "string",
            "pattern": "^[0-9]{14}$"
          },
          "inscricao_estadual": {
            "type": "string"
          }
        }
      }
    }
  ],
  "definitions": {
    "empresa": {
      "type": "object",
      "properties": {
        "cnpj": {"type": "string", "pattern": "^[0-9]{14}$"},
        "inscricao_estadual": {"type": "string"},
        "razao_social": {"type": "string"},
        "endereco": {"$ref": "#/definitions/endereco"}
      },
      "required": ["cnpj", "razao_social"]
    },
    "endereco": {
      "type": "object",
      "properties": {
        "logradouro": {"type": "string"},
        "numero": {"type": "string"},
        "bairro": {"type": "string"},
        "municipio": {"type": "string"},
        "uf": {"type": "string", "pattern": "^[A-Z]{2}$"},
        "cep": {"type": "string", "pattern": "^[0-9]{8}$"}
      },
      "required": ["logradouro", "municipio", "uf", "cep"]
    },
    "item_nfe": {
      "type": "object",
      "properties": {
        "codigo": {"type": "string"},
        "descricao": {"type": "string"},
        "ncm": {"type": "string", "pattern": "^[0-9]{8}$"},
        "cfop": {"type": "string", "pattern": "^[0-9]{4}$"},
        "quantidade": {"type": "number", "minimum": 0},
        "valor_unitario": {"type": "number", "minimum": 0},
        "valor_total": {"type": "number", "minimum": 0}
      },
      "required": ["descricao", "ncm", "cfop", "quantidade", "valor_unitario"]
    },
    "totais_nfe": {
      "type": "object",
      "properties": {
        "valor_produtos": {"type": "number", "minimum": 0},
        "valor_frete": {"type": "number", "minimum": 0},
        "valor_seguro": {"type": "number", "minimum": 0},
        "valor_desconto": {"type": "number", "minimum": 0},
        "valor_total": {"type": "number", "minimum": 0},
        "icms_total": {"type": "number", "minimum": 0},
        "ipi_total": {"type": "number", "minimum": 0}
      },
      "required": ["valor_produtos", "valor_total"]
    }
  }
}
EOF

    # Schema Banking MCP
    cat > ~/.claude/agro-erp/schemas/banking-br-mcp.json << 'EOF'
{
  "name": "banking-br",
  "version": "1.0.0", 
  "description": "MCP Server para integra√ß√µes banc√°rias brasileiras",
  "tools": [
    {
      "name": "processar_pix",
      "description": "Processa transa√ß√£o PIX",
      "inputSchema": {
        "type": "object",
        "properties": {
          "tipo": {
            "type": "string",
            "enum": ["cobranca", "transferencia", "consulta"]
          },
          "valor": {"type": "number", "minimum": 0.01},
          "chave_pix": {"type": "string"},
          "descricao": {"type": "string", "maxLength": 140}
        },
        "required": ["tipo", "chave_pix"]
      }
    },
    {
      "name": "gerar_cnab240",
      "description": "Gera arquivo CNAB 240 para remessa banc√°ria",
      "inputSchema": {
        "type": "object",
        "properties": {
          "banco": {"type": "string", "pattern": "^[0-9]{3}$"},
          "agencia": {"type": "string"},
          "conta": {"type": "string"},
          "pagamentos": {
            "type": "array",
            "items": {"$ref": "#/definitions/pagamento_cnab"}
          }
        },
        "required": ["banco", "agencia", "conta", "pagamentos"]
      }
    },
    {
      "name": "processar_retorno_cnab",
      "description": "Processa arquivo de retorno CNAB",
      "inputSchema": {
        "type": "object",
        "properties": {
          "arquivo_retorno": {"type": "string"},
          "formato": {
            "type": "string",
            "enum": ["cnab240", "cnab400"]
          }
        },
        "required": ["arquivo_retorno", "formato"]
      }
    },
    {
      "name": "conciliar_extrato",
      "description": "Concilia extrato banc√°rio com lan√ßamentos",
      "inputSchema": {
        "type": "object",
        "properties": {
          "extrato": {
            "type": "array",
            "items": {"$ref": "#/definitions/lancamento_bancario"}
          },
          "periodo": {
            "type": "object",
            "properties": {
              "data_inicio": {"type": "string", "format": "date"},
              "data_fim": {"type": "string", "format": "date"}
            },
            "required": ["data_inicio", "data_fim"]
          }
        },
        "required": ["extrato", "periodo"]
      }
    }
  ],
  "definitions": {
    "pagamento_cnab": {
      "type": "object",
      "properties": {
        "favorecido": {"type": "string"},
        "cpf_cnpj": {"type": "string"},
        "banco": {"type": "string", "pattern": "^[0-9]{3}$"},
        "agencia": {"type": "string"},
        "conta": {"type": "string"},
        "valor": {"type": "number", "minimum": 0.01},
        "data_pagamento": {"type": "string", "format": "date"},
        "finalidade": {"type": "string"}
      },
      "required": ["favorecido", "cpf_cnpj", "valor", "data_pagamento"]
    },
    "lancamento_bancario": {
      "type": "object",
      "properties": {
        "data": {"type": "string", "format": "date"},
        "historico": {"type": "string"},
        "documento": {"type": "string"},
        "valor": {"type": "number"},
        "tipo": {
          "type": "string",
          "enum": ["debito", "credito"]
        },
        "saldo": {"type": "number"}
      },
      "required": ["data", "historico", "valor", "tipo"]
    }
  }
}
EOF

    log "Schemas MCP criados"
}

# Criar templates de projeto
create_project_templates() {
    log "Criando templates de projeto..."
    
    # Template m√≥dulo ERP b√°sico
    cat > ~/.claude/agro-erp/templates/modulo-erp-basico.md << 'EOF'
# Template: M√≥dulo ERP B√°sico para Agroneg√≥cio

## Prompt Inicial
```
Desenvolver m√≥dulo ERP para agroneg√≥cio com as seguintes caracter√≠sticas:

**Funcionalidade**: [DESCREVER FUNCIONALIDADE PRINCIPAL]
**Escopo**: [DEFINIR ESCOPO ESPEC√çFICO]
**Integra√ß√µes**: [LISTAR INTEGRA√á√ïES NECESS√ÅRIAS]
**Compliance**: [REQUISITOS FISCAIS/REGULAT√ìRIOS]

**Stack Tecnol√≥gica**:
- Backend: Node.js + TypeScript + Fastify
- Database: PostgreSQL + Prisma ORM
- Frontend: Next.js + React + Tailwind CSS
- APIs: GraphQL + REST
- Testes: Jest + Cypress
- Deploy: Docker + Kubernetes

**Requisitos Espec√≠ficos Agro**:
- Suporte offline para opera√ß√µes de campo
- Integra√ß√£o SEFAZ-MT para compliance fiscal
- Gest√£o por talh√µes/safras/ciclos produtivos
- Rastreabilidade completa da cadeia
- Relat√≥rios gerenciais espec√≠ficos

**Arquitetura**:
- Microservi√ßos com API Gateway
- Event-driven para integra√ß√µes
- CQRS para opera√ß√µes complexas
- Cache Redis para performance
- Message queue para processamento ass√≠ncrono

Implemente seguindo as melhores pr√°ticas de desenvolvimento e inclua:
1. Estrutura completa do projeto
2. Modelos de dados (Prisma schema)
3. APIs REST e GraphQL
4. Interface web responsiva
5. Testes automatizados
6. Documenta√ß√£o t√©cnica
7. Scripts de deploy
8. Configura√ß√£o CI/CD
```

## Estrutura de Diret√≥rios Esperada
```
projeto-modulo-agro/
‚îú‚îÄ‚îÄ backend/
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ modules/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ shared/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ database/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ tests/
‚îÇ   ‚îú‚îÄ‚îÄ prisma/
‚îÇ   ‚îú‚îÄ‚îÄ docker/
‚îÇ   ‚îî‚îÄ‚îÄ docs/
‚îú‚îÄ‚îÄ frontend/
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pages/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hooks/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ utils/
‚îÇ   ‚îú‚îÄ‚îÄ public/
‚îÇ   ‚îî‚îÄ‚îÄ tests/
‚îú‚îÄ‚îÄ shared/
‚îÇ   ‚îú‚îÄ‚îÄ types/
‚îÇ   ‚îî‚îÄ‚îÄ schemas/
‚îú‚îÄ‚îÄ deployment/
‚îÇ   ‚îú‚îÄ‚îÄ kubernetes/
‚îÇ   ‚îú‚îÄ‚îÄ docker-compose/
‚îÇ   ‚îî‚îÄ‚îÄ scripts/
‚îî‚îÄ‚îÄ docs/
    ‚îú‚îÄ‚îÄ api/
    ‚îú‚îÄ‚îÄ user/
    ‚îî‚îÄ‚îÄ technical/
```

## Checklist de Valida√ß√£o
- [ ] Estrutura de projeto completa
- [ ] Database schema com relacionamentos
- [ ] APIs funcionais (REST + GraphQL)
- [ ] Interface web responsiva
- [ ] Testes unit√°rios e integra√ß√£o
- [ ] Documenta√ß√£o API (OpenAPI/Swagger)
- [ ] Scripts deploy automatizado
- [ ] Configura√ß√£o CI/CD
- [ ] Compliance fiscal implementado
- [ ] Suporte offline b√°sico
EOF

    # Template integra√ß√£o API
    cat > ~/.claude/agro-erp/templates/integracao-api.md << 'EOF'
# Template: Integra√ß√£o API Externa

## Prompt Inicial
```
Implementar integra√ß√£o robusta com API externa para ERP agroneg√≥cio:

**API Alvo**: [NOME DA API - ex: SEFAZ-MT, Banco do Brasil, Cooperativa]
**Funcionalidades**: [LISTAR ENDPOINTS NECESS√ÅRIOS]
**Autentica√ß√£o**: [TIPO - OAuth2, JWT, API Key, Certificado Digital]
**Formato**: [REST, SOAP, GraphQL, EDI]

**Requisitos T√©cnicos**:
- Retry policy com backoff exponencial
- Circuit breaker para falhas
- Rate limiting respeitando limites API
- Cache inteligente para reduzir chamadas
- Logging completo para auditoria
- Monitoring e alertas
- Fallback para indisponibilidade

**Requisitos Agroneg√≥cio**:
- Suporte opera√ß√£o offline (quando aplic√°vel)
- Valida√ß√£o dados antes envio
- Conformidade regulamenta√ß√µes espec√≠ficas
- Rastreabilidade completa transa√ß√µes
- Relat√≥rios de status integra√ß√µes

**Implementar**:
1. Cliente API com todas as funcionalidades
2. Modelos de dados (request/response)
3. Valida√ß√µes e transforma√ß√µes
4. Testes unit√°rios e integra√ß√£o
5. Documenta√ß√£o t√©cnica
6. Scripts configura√ß√£o
7. Monitoring e alertas
8. Exemplos de uso
```

## Estrutura Esperada
```
integracao-[api-name]/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ client/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ [api-name]-client.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ endpoints/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ types/
‚îÇ   ‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ [api-name]-service.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ cache/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ retry/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ validation/
‚îÇ   ‚îú‚îÄ‚îÄ models/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ request/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ response/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ mappings/
‚îÇ   ‚îî‚îÄ‚îÄ utils/
‚îÇ       ‚îú‚îÄ‚îÄ logger.ts
‚îÇ       ‚îú‚îÄ‚îÄ monitoring.ts
‚îÇ       ‚îî‚îÄ‚îÄ helpers.ts
‚îú‚îÄ‚îÄ tests/
‚îÇ   ‚îú‚îÄ‚îÄ unit/
‚îÇ   ‚îú‚îÄ‚îÄ integration/
‚îÇ   ‚îî‚îÄ‚îÄ mocks/
‚îú‚îÄ‚îÄ docs/
‚îÇ   ‚îú‚îÄ‚îÄ api-reference.md
‚îÇ   ‚îú‚îÄ‚îÄ setup-guide.md
‚îÇ   ‚îî‚îÄ‚îÄ troubleshooting.md
‚îî‚îÄ‚îÄ config/
    ‚îú‚îÄ‚îÄ environments/
    ‚îî‚îÄ‚îÄ schemas/
```

## Checklist de Valida√ß√£o
- [ ] Cliente API completo e funcional
- [ ] Autentica√ß√£o implementada corretamente
- [ ] Retry policy e circuit breaker
- [ ] Cache e rate limiting
- [ ] Logging e monitoring
- [ ] Testes abrangentes (>90% cobertura)
- [ ] Documenta√ß√£o completa
- [ ] Tratamento de erros robusto
- [ ] Valida√ß√£o dados entrada/sa√≠da
- [ ] Configura√ß√£o por ambiente
EOF

    log "Templates de projeto criados"
}

# Fun√ß√£o principal
main() {
    echo -e "${BLUE}"
    cat << 'EOF'
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                              ‚ïë
    ‚ïë    üåæ CLAUDE CODE SETUP PARA ERPs AGRONEG√ìCIO üåæ           ‚ïë
    ‚ïë                                                              ‚ïë
    ‚ïë    Configura√ß√£o completa para desenvolvimento acelerado      ‚ïë
    ‚ïë    de sistemas ERP para o agroneg√≥cio brasileiro            ‚ïë
    ‚ïë                                                              ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
    
    check_claude_code
    create_directory_structure
    setup_basic_settings
    create_specialized_agents
    create_validation_scripts
    create_mcp_schemas
    create_project_templates
    
    echo ""
    log "‚úÖ Setup conclu√≠do com sucesso!"
    echo ""
    echo -e "${GREEN}Pr√≥ximos passos:${NC}"
    echo "1. Configurar MCPs espec√≠ficos: cd ~/.claude/agro-erp/mcps/"
    echo "2. Testar subagentes: claude --agent agro-fiscal-compliance"
    echo "3. Usar templates: cat ~/.claude/agro-erp/templates/modulo-erp-basico.md"
    echo "4. Verificar logs: tail -f ~/.claude/agro-erp/logs/database_audit.jsonl"
    echo ""
    echo -e "${YELLOW}Documenta√ß√£o completa em: ~/.claude/agro-erp/docs/${NC}"
    echo ""
}

# Executar setup
main "$@"

